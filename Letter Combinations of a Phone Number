problem：
Given a digit string, return all possible letter combinations that the number could represent.

A mapping of digit to letters (just like on the telephone buttons) is given below.

'2': "abc"
'3': "def"
'4': "ghi"
'5': "jkl"
'6': "mno"
'7': "pqrs"
'8': "tuv"
'9': "wxyz"

Input:Digit string "23"
Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].
Note:
Although the above answer is in lexicographical order, your answer could be in any order you want.
-----------------------------------------------------------------------------------------------------
solution:
//一个深搜的过程，注意体会
string tables[8]={"abc","def","ghi","jkl","mno","pqrs","tuv","wxyz"};
void dfs(vector<string>& ret, int n, int start, string& digits, string cur)
{
  string s = tables[digits[start] - '2'];
	int len = s.length();
	for(int i = 0; i < len; i++)
	{	
		string next = cur + s[i];
		if(start == n-1)
			ret.push_back(next);
		else
			dfs(ret, n, start+1, digits, next);
	}
}

vector<string> letterCombinations(string digits)
{
	int n = digits.length();
	vector<string> ret;
	if(n <= 0)
	{
		ret.push_back("");
		return ret;
	}
	dfs(ret, n, 0, digits, "");
	return ret;
}
