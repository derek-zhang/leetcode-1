problem:
Given an array of integers, find two numbers such that they add up to a specific target number.
The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2. Please note that your returned answers (both index1 and index2) are not zero-based.
You may assume that each input would have exactly one solution.
Input: numbers={2, 7, 11, 15}, target=9
Output: index1=1, index2=2


solution：
//一、要输出原序列中对应的索引值，因此不能直接改原序列
//二、要保证是输出满足条件的较小索引值，因此排序要考虑值相等时的索引排序
//三、输出的两个index也要有序
using namespace std;
struct num
{
  int index;  
	int data_value;
	num (int i, int d):index(i),data_value(d){}
};

//算术和关系操作符一般定义为非成员函数
bool operator<(const num a, const num b) 
{
	if(a.data_value == b.data_value)  
		return a.index < b.index;
	else
		return a.data_value < b.data_value;
}

class Solution {
public:
	vector<int> twoSum(vector<int> &numbers, int target)
	{
		vector<num> arr;
		vector<int> result;
		for(int i = 0; i < numbers.size(); i++)
		{
			arr.push_back(num(i+1, numbers[i]));
		}
		sort(arr.begin(), arr.end());
		int i = 0; int j = arr.size() -1;
		while(i < j)
		{
			if(arr[i].data_value + arr[j].data_value == target)
			{	
				result.push_back(min(arr[i].index, arr[j].index));
				result.push_back(max(arr[i].index, arr[j].index));
				return result;
			}
			else if(arr[i].data_value + arr[j].data_value < target)
			{
				i++;
			}
			else
				j--;
		}
	}
};
