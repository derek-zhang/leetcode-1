problem:
Given an array of non-negative integers, you are initially positioned at the first index of the array.

Each element in the array represents your maximum jump length at that position.

Your goal is to reach the last index in the minimum number of jumps.

For example:
Given array A = [2,3,1,1,4]

The minimum number of jumps to reach the last index is 2. (Jump 1 step from index 0 to 1, then 3 steps to the last index.)
-----------------------------------------------------------------------------------------------------------
solution:
//用贪心算法，每次取当前位置能跳得最远的下一个位置
int jump(int A[], int n)
{
  if(n == 1)
		return 0;
	int low = 0;
	int high = 0;
	int minStep = 0;
	while(low <= high)
	{
		minStep++;
		int tmpHigh = high;
		for(int i = low; i <= tmpHigh; i++)
		{
			int possDist = i + A[i];
			if(possDist >= n - 1)
				return minStep;
			if(possDist > high)
				high = possDist;
		}
		low = tmpHigh + 1;
	}
	return 0;
}
