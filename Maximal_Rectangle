//DP。用f[i][j]来记录i行j列为结尾，往前连续的1的个数。
//然后再一个O(n^3)的循环来找以(i, j)为右下角的矩形最大的1的面积。
int maximalRectangle(vector<vector<char> > &matrix)
{
  int f[1000][1000];
	int m = matrix.size();
	if(m == 0)
		return 0;
	int n = matrix[0].size();
	if(n == 0)
		return 0;
	for(int i = 0; i < m; ++i)
		f[i][0] = (matrix[i][0] == '1' ? 1 : 0);
	for(int i = 0; i < m; ++i)
		for(int j = 1; j < n; ++j)
			f[i][j] = (matrix[i][j] == '1' ? f[i][j - 1] + 1 : 0);
	int area = 0;
	for(int i = 0; i < m; ++i)
		for(int j = 0; j < n; ++j)
		{
			int k = i;
			int width = INT_MAX;
			while(k >= 0)
			{
				if(f[k][j] == 0)
					break;
				width = min(width, f[k][j]);
				area = max(area, width * (i - k + 1));
				k--;
			}
		}
	return area;
}
