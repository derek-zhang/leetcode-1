struct TreeNode {
  int val;
	TreeNode *left;
	TreeNode *right;
	TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};

//void inorderTraversal_aux(TreeNode *node, vector<int> &ret)
//{
//	if(node)
//	{
//		if(node->left)
//			inorderTraversal_aux(node->left, ret);
//		ret.push_back(node->val);
//		if(node->right)
//			inorderTraversal_aux(node->right, ret);
//	}
//}
//
//vector<int> inorderTraversal(TreeNode *root)
//{
//	vector<int> ret;
//	ret.clear();
//	inorderTraversal_aux(root, ret);
//	return ret;
//}

vector<int> inorderTraversal(TreeNode *root)
{
	vector<int> ret;
	stack<TreeNode*> s;
	TreeNode *p = root;
	while(!s.empty() || p != NULL)
	{
		if(p != NULL)
		{
			s.push(p);
			p = p->left;
		}
		else
		{
			p = s.top();
			s.pop();
			ret.push_back(p->val);
			p = p->right;
		}
	}
	return ret;
}
